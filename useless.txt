//app.json

{
  "name": "nanimusic",
  "slug": "nanimusic",
  "runtimeVersion": "1.0.0",
  "orientation": "portrait",
  "icon": "./assets/images/appicon.png",
  "scheme": "myapp",
  "userInterfaceStyle": "automatic",
  "newArchEnabled": true,
  "ios": {
    "supportsTablet": true,
    "bundleIdentifier": "com.lakshmannnani.nanimusic",
    "infoPlist": {
      "ITSAppUsesNonExemptEncryption": false,
      "UIBackgroundModes": ["audio"]
    }
  },
  "android": {
    "adaptiveIcon": {
      "foregroundImage": "./assets/images/appicon.png",
      "backgroundColor": "#ffffff"
    },
    "package": "com.lakshmannnani.nanimusic",
    "infoplist": {
      "UIBackgroundModes": ["audio"]
    },
    "permissions": [
      "FOREGROUND_SERVICE",
      "READ_EXTERNAL_STORAGE",
      "WRITE_EXTERNAL_STORAGE",
      "WAKE_LOCK",
      "android.permission.FOREGROUND_SERVICE"
    ],
    "foregroundService": {
      "startForegroundService": true,
      "notificationTitle": "Nani Music",
      "notificationBody": "Playing in background"
    }
  },
  "web": {
    "bundler": "metro",
    "output": "static",
    "favicon": "./assets/images/favImg.png"
  },
  "plugins": [
    "expo-router",
    [
      "expo-splash-screen",
      {
        "image": "./assets/images/splashScreen.png",
        "imageWidth": 200,
        "resizeMode": "contain",
        "backgroundColor": "#ffffff"
      }
    ],
    [
      "expo-notifications",
      {
        "icon": "./assets/notification-icon.png",
        "color": "#ffffff",
        "sounds": [],
        "androidMode": "default",
        "androidCollapsedTitle": "Music Player"
      }
    ],
    "expo-build-properties"
  ],
  "experiments": {
    "typedRoutes": true
  },
  "extra": {
    "router": {
      "origin": false
    },
    "eas": {
      "projectId": "f14beaa9-f88b-4a23-893a-54ab9523e463"
    }
  },
  "owner": "lakshmannnani",
  "updates": {
    "url": "https://u.expo.dev/f14beaa9-f88b-4a23-893a-54ab9523e463",
    "fallbackToCacheTimeout": 0,
    "checkAutomatically": "ON_LOAD"
  }
}


//clean failed 

  const clearFailedDownloads = useCallback(async () => {
    Alert.alert(
      "Clear Failed Downloads",
      "This will remove all corrupted or incomplete downloads. Continue?",
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Clear",
          style: "destructive",
          onPress: async () => {
            setLoading(true);
            try {
              await cleanupOrphanedFiles();
              await loadSongs(false);
              Alert.alert("Success", "Failed downloads have been cleared.");
            } catch (error) {
              Alert.alert("Error", "Failed to clear downloads.");
            } finally {
              setLoading(false);
            }
          },
        },
      ]
    );
  }, [cleanupOrphanedFiles, loadSongs]);

     {songs.length > 0 && (
          <Pressable onPress={clearFailedDownloads} className="ml-auto">
            <Text style={styles.clearButton}>Clean</Text>
          </Pressable>
        )}



build command 


eas build --platform android --profile development

eas update --branch production